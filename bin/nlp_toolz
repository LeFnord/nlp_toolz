#!/usr/bin/env ruby

require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'nlp_toolz'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/nlp_toolz` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/NlpToolz now"
  exit 64
end

include GLI::App

# helper methods
def get_out(this)
  ap this if $stdout.tty?
  $stdout.puts this unless $stdout.tty?
end

def get_in(input_arg)
  if File.exists?(input_arg) && !File.directory?(input_arg)
    return get_file(input_arg)
  else
    return input_arg
  end
end

def get_file(name)
  file = File.open(name).gets(nil)
  "" if file.nil?
  file.force_encoding("utf-8") unless file.nil?
end


program_desc 'running basic NLP tasks'

version NlpToolz::VERSION

desc 'initial setup'
command :init do |c|
  c.action do |global_options,options,args|
    puts 'setting up app'
  end
end

desc 'sentence detection'
arg_name '"text to split into sentences"'
command :sent do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.get_sentences(input)
  end
end

desc 'parsing text'
arg_name '"text to parse"'
command :parse do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.parse_text(input)
  end
end

desc 'pos tagging of text'
arg_name '"text to tag"'
command :tag do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.tag_text(input)
  end
end

desc 'tokenizing text'
arg_name '"text to tokenize"'
command :token do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.tokenize_text(input)
  end
end

on_error do |exception|
  true
end

exit run(ARGV)
