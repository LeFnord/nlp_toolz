#!/usr/bin/env ruby

require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'nlp_toolz'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/NlpToolz` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/NlpToolz now"
  exit 64
end

include GLI::App

# helper methods
def get_out(this)
  ap this if $stdout.tty?
  $stdout.puts this unless $stdout.tty?
end


program_desc 'running basic NLP tasks'

version NlpToolz::VERSION

desc 'sentence detection'
arg_name 'Describe arguments to sent here'
command :sent do |c|
  # c.desc 'file input'
  # c.arg_name '<path/to/file>'
  # c.flag [:f,:file]
  c.action do |global_options,options,args|
    get_out NlpToolz.get_sentences(args.first)
  end
end

desc 'parsing text'
arg_name 'Describe arguments to parse here'
command :parse do |c|
  # c.desc 'file input'
  # c.arg_name '<path/to/file>'
  # c.flag [:f,:file]
  c.action do |global_options,options,args|
    get_out NlpToolz.parse_text(args.first)
  end
end

desc 'pos tagging of text'
arg_name 'Describe arguments to tag here'
command :tag do |c|
  # c.desc 'file input'
  # c.arg_name '<path/to/file>'
  # c.flag [:f,:file]
  c.action do |global_options,options,args|
    get_out NlpToolz.tag_text(args.first)
  end
end

desc 'tokenizing text'
arg_name 'Describe arguments to token here'
command :token do |c|
  # c.desc 'file input'
  # c.arg_name '<path/to/file>'
  # c.flag [:f,:file]
  c.action do |global_options,options,args|
    get_out NlpToolz.tokenize_text(args.first)
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
