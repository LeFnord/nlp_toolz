#!/usr/bin/env ruby
# frozen_string_literal: true
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'gli'

# for downloading models and jars
# require "schiphol"
# require "zip/zip"

require 'nlp_toolz'

include GLI::App

# helper methods
def get_out(this)
  $stdout.puts this
end

def get_in(input_arg)
  if File.exists?(input_arg) && !File.directory?(input_arg)
    return get_file(input_arg)
  else
    return input_arg
  end
end

def get_file(name)
  file = File.open(name).gets(nil)
  "" if file.nil?
  file.force_encoding("utf-8") unless file.nil?
end

def unzip_file(file, destination)
  Zip::ZipFile.open(file) { |zip_file|
   zip_file.each { |f|
     f_path=File.join(destination, f.name)
     FileUtils.mkdir_p(File.dirname(f_path))
     zip_file.extract(f, f_path) unless File.exist?(f_path)
   }
  }
end

def add_path_in_lanikernel
  file = IO.read(File.join(NlpToolz::HOME,'models','language','lanikernel.ini'))
  file.sub!('WordlistDir=models',"WordlistDir=#{NlpToolz::HOME}/models")
  file.sub!('BlacklistFile=models',"BlacklistFile=#{NlpToolz::HOME}/models")
  file.sub!('MappingFile=models',"MappingFile=#{NlpToolz::HOME}/models")
  File.open(File.join(NlpToolz::HOME,'models','language','lanikernel.ini'), 'w') {|f| f.write(file) }
end

program_desc 'running basic NLP tasks'

version NlpToolz::VERSION

desc 'initial setup'
command :init do |c|
  c.action do |global_options,options,args|
    unless Dir.exist?(File.join(NlpToolz::HOME,'models')) && Dir.exist?(File.join(NlpToolz::HOME,'jars'))
      gem_home = NlpToolz::HOME
      $stdout.print "download and unzip to: ".green
      $stdout.puts "#{gem_home}".blue
      [
        'https://dl.dropboxusercontent.com/sh/1layyjgf5h0wwi3/AACw8Y04KnFotOpBkzcfLxmwa/jars.zip',
        'https://dl.dropboxusercontent.com/sh/1layyjgf5h0wwi3/AADUSMRMVg3n54Djdy9BWYVEa/models.zip',
      ].each do |link|
        loaded_file = link.split('/').last.sub('?dl=0','')
        $stdout.print "download: ".green
        $stdout.puts "#{loaded_file}".blue

        system( "wget -P #{gem_home} #{link}")

        $stdout.puts "extracting â€¦".green
        unzip_file(File.join(gem_home,loaded_file),gem_home)
        FileUtils.rm(File.join(gem_home,loaded_file))
      end
      $stdout.puts "add abbsolute path to language config".green
      add_path_in_lanikernel
    else
      $stdout.puts "files exist".green
    end
  end
end

desc 'sentence detection'
arg_name '"text to split into sentences"'
command :sent do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    NlpToolz.check_dependencies
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.get_sentences(input)
  end
end

desc 'parsing text'
arg_name '"text to parse"'
command :parse do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    NlpToolz.check_dependencies
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.parse_text(input)
  end
end

desc 'pos tagging of text'
arg_name '"text to tag"'
command :tag do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    NlpToolz.check_dependencies
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.tag_text(input)
  end
end

desc 'tokenizing text'
arg_name '"text to tokenize"'
command :token do |c|
  c.desc 'file input'
  c.arg_name '<path/to/file>'
  c.flag [:f,:file]
  c.action do |global_options,options,args|
    NlpToolz.check_dependencies
    input = get_in(options[:f] || args.first)
    get_out NlpToolz.tokenize_text(input)
  end
end

on_error do |exception|
  true
end

exit run(ARGV)
